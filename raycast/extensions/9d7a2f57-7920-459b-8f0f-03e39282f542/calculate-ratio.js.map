{
  "version": 3,
  "sources": ["../src/calculate-ratio.jsx"],
  "sourcesContent": ["import { List, ActionPanel, Action, Icon } from \"@raycast/api\";\nimport { useState } from \"react\";\n\nfunction actionPanel(text) {\n  return (\n    <ActionPanel>\n      <Action.CopyToClipboard title=\"Copy Result\" content={text} />\n      <Action.Paste content={text} />\n    </ActionPanel>\n  );\n}\n\nexport default function calculateRatio() {\n  const [answers, setAnswers] = useState([]);\n\n  return (\n    <List\n      searchBarPlaceholder=\"Enter your ratio here\"\n      onSearchTextChange={(text) => getEquivalentRatio(text, setAnswers)}\n    >\n      <List.Section title=\"Answer\">\n        {answers.map((answer, index) => (\n          <List.Item\n            key={index}\n            actions={actionPanel(answer.value ? answer.value.toString() : answer.variable)}\n            title={\n              answer.value\n                ? `${capitalizeFirstLetter(answer.variable)} = ${answer.value.toFixed(2)}`\n                : `${answer.variable}`\n            }\n            icon={\n              answer.variable == \"True\"\n                ? Icon.CheckCircle\n                : answer.variable == \"False\"\n                ? Icon.XMarkCircle\n                : Icon.PlusMinusDivideMultiply\n            }\n          />\n        ))}\n      </List.Section>\n    </List>\n  );\n}\n\nfunction getFactors(number) {\n  var factors = [];\n  for (var i = 1; i <= number; i++) {\n    if (number % i == 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n}\n\nfunction getGCF(ratio) {\n  // Gets the greatest common factor of the two ratios\n\n  var factors1 = getFactors(ratio[0]);\n  var factors2 = getFactors(ratio[1]);\n\n  var gcf = 0;\n\n  factors1.forEach((factor) => {\n    if (factors2.includes(factor)) {\n      gcf = Math.max(gcf, factor);\n    }\n  });\n\n  return gcf == 1 ? false : gcf;\n}\n\nfunction getEquivalentRatio(text, setAnswers) {\n  const answerList = [];\n\n  let splitEquation = text;\n\n  if (text.split(\"=\").length == 1) {\n    splitEquation = text.split(\" \");\n  } else {\n    splitEquation = text.replace(/ /g, \"\").split(\"=\");\n  }\n\n  if (splitEquation.length != 2) {\n    if (splitEquation.length != 1) {\n      setAnswers([]);\n      return;\n    }\n    var oldRatio = splitEquation[0].split(\"/\");\n    var simplifiedRatio = oldRatio.slice();\n\n    if (oldRatio.length != 2 && oldRatio[1] != \"\") {\n      setAnswers([]);\n      return;\n    }\n\n    var isSimplified = false;\n    var iters = 0;\n    while (!isSimplified) {\n      iters++;\n      if (iters > 50) {\n        console.log(\"THAT was close\");\n        return;\n      }\n      var gcf = getGCF(simplifiedRatio);\n      if (gcf == false) {\n        isSimplified = true;\n        break;\n      }\n      simplifiedRatio = [oldRatio[0] / gcf, oldRatio[1] / gcf];\n    }\n\n    answerList.push({\n      variable: simplifiedRatio.join(\":\"),\n      value: \"\",\n    });\n\n    setAnswers(answerList);\n    return;\n  }\n\n  let firstRatio = splitEquation[0].split(/[/:]/g);\n  let secondRatio = splitEquation[1].split(/[/:]/g);\n\n  if (firstRatio.length != secondRatio.length || firstRatio.length == 1) {\n    return;\n  }\n\n  // Runs if the expression contains a variable, otherwise checks if the ratios are equal\n  if (secondRatio.some((el) => !isNumber(el)) || firstRatio.some((el) => !isNumber(el))) {\n    if (firstRatio.some((el) => !isNumber(el))) {\n      [firstRatio, secondRatio] = [secondRatio, firstRatio];\n    }\n\n    secondRatio.forEach((number, index) => {\n      if (isNumber(number)) {\n        return;\n      }\n      if (firstRatio.length == 2) {\n        const nonVarIndex = index - 1 == -1 ? 1 : 0;\n\n        answerList.push({\n          variable: number,\n          value: (firstRatio[index] / firstRatio[nonVarIndex]) * secondRatio[nonVarIndex],\n        });\n      } else {\n        const indexOfNumber = secondRatio.findIndex((el) => isNumber(el));\n\n        answerList.push({\n          variable: number,\n          value: secondRatio[indexOfNumber] / (firstRatio[indexOfNumber] / firstRatio[index]),\n        });\n      }\n    });\n  } else {\n    let areEquivalent = true;\n    for (var i = 0; i < firstRatio.length - 1; i++) {\n      const decimalRatio = firstRatio[0] / firstRatio[i + 1];\n      if (decimalRatio != secondRatio[0] / secondRatio[i + 1]) {\n        areEquivalent = false;\n      }\n    }\n    answerList.push({\n      variable: capitalizeFirstLetter(areEquivalent.toString()),\n      value: \"\",\n    });\n  }\n\n  setAnswers(answerList);\n}\n\nfunction capitalizeFirstLetter(text) {\n  return text.slice(0, 1).toUpperCase() + text.slice(1);\n}\n\nfunction isNumber(numberString) {\n  return !isNaN(Number(numberString));\n}\n"],
  "mappings": "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",
  "names": ["calculate_ratio_exports", "__export", "calculateRatio", "__toCommonJS", "import_api", "import_react", "import_jsx_runtime", "actionPanel", "text", "answers", "setAnswers", "getEquivalentRatio", "answer", "index", "capitalizeFirstLetter", "getFactors", "number", "factors", "i", "getGCF", "ratio", "factors1", "factors2", "gcf", "factor", "answerList", "splitEquation", "oldRatio", "simplifiedRatio", "isSimplified", "iters", "firstRatio", "secondRatio", "el", "isNumber", "nonVarIndex", "indexOfNumber", "areEquivalent", "numberString"]
}
